package org.telegram.updateshandlers;

import org.telegram.BotConfig;
import org.telegram.telegrambots.TelegramApiException;
import org.telegram.telegrambots.api.methods.send.SendMessage;
import org.telegram.telegrambots.api.objects.Message;
import org.telegram.telegrambots.api.objects.Update;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.updatesreceivers.BotSession;

import de.vogella.rss.global.GlobalRssText;
import de.vogella.rss.model.Feed;
import de.vogella.rss.read.RSSFeedParser;
import de.vogella.rss.read.tryRSS;


/**
 * @author Ruben Bermudez
 * @version 1.0
 * @brief Handler for updates to Weather Bot
 * @date 24 of June of 2015
 */
public class WeatherHandlers extends TelegramLongPollingBot {
    private static final String LOGTAG = "WEATHERHANDLERS";
    
    private static final int STARTSTATE = 0;
    private static final int MAINMENU = 1;
    private static final int CURRENTWEATHER = 2;
    private static final int CURRENTNEWWEATHER = 3;
    private static final int CURRENTLOCATIONWEATHER = 4;
    private static final int FORECASTWEATHER = 5;
    private static final int FORECASTNEWWEATHER = 6;
    private static final int FORECASTLOCATIONWEATHER = 7;
    private static final int ALERT = 8;
    private static final int ALERTNEW = 9;
    private static final int ALERTDELETE = 10;
    private static final int SETTINGS = 11;
    private static final int LANGUAGE = 12;
    private static final int UNITS = 13;
    @Override
    public String getBotUsername() {
            // TODO Auto-generated method stub
            return BotConfig.USERNAMEWEATHER;
    }


    @Override
    public String getBotToken() {
            // TODO Auto-generated method stub
            return BotConfig.TOKENWEATHER;
    }
    
    public void Message(String ChatId, String Text){
    SendMessage sendMessageRequest = new SendMessage();
	sendMessageRequest.setChatId(ChatId.toString());
	sendMessageRequest.setText(Text);
	try{
		sendMessage(sendMessageRequest);
		} catch (TelegramApiException e){}
    }
    
    @Override
    public void onUpdateReceived(Update update) {

            //check if the update has a message
            if(update.hasMessage()){
            	
                    Message message = update.getMessage();

                    //check if the message has text. it could also  contain for example a location ( message.hasLocation() )
                    if(message.hasText()){
                    		
                    		if(message.getText().contains("/topics")){
                    			String Text = "currentWeather" + "\n" + "currentWarning" + "\n" + "Subscribe" + "\n" + "UnSubscribe";
                    			Message(message.getChatId().toString(),Text);
                    			/*SendMessage sendMessageRequest = new SendMessage();
                    			sendMessageRequest.setChatId(message.getChatId().toString());
                    			sendMessageRequest.setText("currentWeather" + "\n" + "currentWarning" + "\n" + "Subscribe" + "\n" + "UnSubscribe");
                    			try{
                    				sendMessage(sendMessageRequest);
                    			} catch (TelegramApiException e){
                    				
                    			}*/
                    		}
                    		
                    	    if (message.getText().contains("/currentWarning")){
	                            SendMessage sendMessageRequest = new SendMessage();
	                            sendMessageRequest.setChatId(message.getChatId().toString()); //who should get the message? the sender from which we got the message...
	                            sendMessageRequest.setText(tryRSS.readRSSFeed("http://rss.weather.gov.hk/rss/WeatherWarningSummaryv2.xml","Warning"));

	                            try {
	                                    sendMessage(sendMessageRequest); //at the end, so some magic and send the message ;)
	                            } catch (TelegramApiException e) {
	                                    //do some error handling
	                            }//end catch()
                    	    } 
                    	    
                    	    if (message.getText().contains("/currentWeather")){
	                            //create a object that contains the information to send back the message
	                            SendMessage sendMessageRequest = new SendMessage();
	                            sendMessageRequest.setChatId(message.getChatId().toString()); //who should get the message? the sender from which we got the message...
	                            sendMessageRequest.setText(tryRSS.readRSSFeed("http://rss.weather.gov.hk/rss/CurrentWeather.xml","Weather"));
	       
	                            try {
	                                    sendMessage(sendMessageRequest); //at the end, so some magic and send the message ;
	                            } catch (TelegramApiException e) {
	                                    //do some error handling
	                            }//end catch()
                    	    }
                    	    if(message.getText().contains("/SubscribeWeather")){
                    	    	BotSession.isSubscribedWeather = true;
                    	    }
                    	    if(message.getText().contains("/unSubscribeWeather")){
                    	    	BotSession.isSubscribedWeather = false;
                    	    }
                    	    if(message.getText().contains("/SubscribeWarning")){
                    	    	BotSession.isSubscribedWarning = true;
                    	    }
                    	    if(message.getText().contains("/unSubscribeWeather")){
                    	    	BotSession.isSubscribedWeather = false;
                    	    }
                    }//end if()
            }//end  if()

    }//end onUpdateReceived()
    
}