package org.telegram.telegrambots.updatesreceivers;

import org.apache.http.HttpEntity;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.entity.BufferedHttpEntity;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.telegram.BotConfig;
import org.telegram.telegrambots.Constants;
import org.telegram.telegrambots.TelegramApiException;
import org.telegram.telegrambots.api.methods.BotApiMethod;
import org.telegram.telegrambots.api.methods.send.SendMessage;
import org.telegram.telegrambots.api.methods.updates.GetUpdates;
import org.telegram.telegrambots.api.objects.Message;
import org.telegram.telegrambots.api.objects.Update;
import org.telegram.telegrambots.bots.ITelegramLongPollingBot;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.logging.BotLogger;

import de.vogella.rss.global.GlobalRssText;
import de.vogella.rss.read.tryRSS;
import static org.telegram.telegrambots.Constants.ERRORCODEFIELD;
import static org.telegram.telegrambots.Constants.ERRORDESCRIPTIONFIELD;

import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.Serializable;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.TimeUnit;

/**
 * @author Ruben Bermudez
 * @version 1.0
 * @brief Thread to request updates with active wait
 * @date 20 of June of 2015
 */
public class BotSession{
    private static final String LOGTAG = "BOTSESSION";
    private static final int SOCKET_TIMEOUT = 75 * 1000;

    private final ITelegramLongPollingBot callback;
    private final ReaderThread readerThread;
    private final HandlerThread handlerThread;
    private final SubThread subThread;
    private final ConcurrentLinkedDeque<Update> receivedUpdates = new ConcurrentLinkedDeque<>();
    private final String token;
    private int lastReceivedUpdate = 0;
    private volatile boolean running = true;
    private volatile CloseableHttpClient httpclient;
    private volatile RequestConfig requestConfig;
    private String WeatherPubDate;
    private String WarningPubDate;
    public static boolean isSubscribedWeather = false;
    public static boolean isSubscribedWarning = false;

    public BotSession(String token, ITelegramLongPollingBot callback) {
        this.token = token;
        this.callback = callback;

        httpclient = HttpClientBuilder.create()
                .setSSLHostnameVerifier(new NoopHostnameVerifier())
                .setConnectionTimeToLive(70, TimeUnit.SECONDS)
                .setMaxConnTotal(100)
                .build();

        requestConfig = RequestConfig.copy(RequestConfig.custom().build())
                .setSocketTimeout(SOCKET_TIMEOUT)
                .setConnectTimeout(SOCKET_TIMEOUT)
                .setConnectionRequestTimeout(SOCKET_TIMEOUT).build();

        readerThread = new ReaderThread();
        readerThread.setName(callback.getBotUsername() + " Telegram Connection");
        readerThread.start();

        handlerThread = new HandlerThread();
        handlerThread.setName(callback.getBotUsername() + " Telegram Executor");
        handlerThread.start();
        
        subThread = new SubThread();
        subThread.setName(callback.getBotUsername() + " Telegram Sub");
        subThread.start();
        
    }

    public void close() {
        running = false;
        if (readerThread != null) {
            readerThread.interrupt();
        }
        if (handlerThread != null) {
            handlerThread.interrupt();
        }
        
        if (subThread != null) {
            subThread.interrupt();
        }
        
        
        if (httpclient != null) {
            try {
                httpclient.close();
                httpclient = null;
            } catch (IOException e) {
                BotLogger.severe(LOGTAG, e);
            }
        }
    }

    private class ReaderThread extends Thread {

        @Override
        public void run() {
            setPriority(Thread.MIN_PRIORITY);
            while (running) {
                try {
                    GetUpdates request = new GetUpdates();
                    request.setLimit(100);
                    request.setTimeout(Constants.GETUPDATESTIMEOUT);
                    request.setOffset(lastReceivedUpdate + 1);
                    String url = Constants.BASEURL + token + "/" + GetUpdates.PATH;
                    //http client
                    HttpPost httpPost = new HttpPost(url);
                    httpPost.addHeader("charset", StandardCharsets.UTF_8.name());
                    httpPost.setConfig(requestConfig);
                    httpPost.setEntity(new StringEntity(request.toJson().toString(), ContentType.APPLICATION_JSON));

                    try (CloseableHttpResponse response = httpclient.execute(httpPost)) {
                        HttpEntity ht = response.getEntity();
                        BufferedHttpEntity buf = new BufferedHttpEntity(ht);
                        String responseContent = EntityUtils.toString(buf, StandardCharsets.UTF_8);
                        JSONObject jsonObject = new JSONObject(responseContent);
                        if (!jsonObject.getBoolean(Constants.RESPONSEFIELDOK)) {
                            throw new TelegramApiException("Error getting updates",
                                    jsonObject.getString(Constants.ERRORDESCRIPTIONFIELD),
                                    jsonObject.getInt(Constants.ERRORCODEFIELD));
                        }
                        JSONArray jsonArray = jsonObject.getJSONArray(Constants.RESPONSEFIELDRESULT);
                        if (jsonArray.length() != 0) {
                            for (int i = 0; i < jsonArray.length(); i++) {
                                Update update = new Update(jsonArray.getJSONObject(i));
                                if (update.getUpdateId() > lastReceivedUpdate) {
                                    lastReceivedUpdate = update.getUpdateId();
                                    receivedUpdates.addFirst(update);
                                }
                            }
                            synchronized (receivedUpdates) {
                                receivedUpdates.notifyAll();
                            }
                        } else {
                            try {
                                synchronized (this) {
                                    this.wait(500);
                                }
                            } catch (InterruptedException e) {
                                BotLogger.severe(LOGTAG, e);
                            }
                        }
                    } catch (InvalidObjectException | JSONException | TelegramApiException e) {
                        BotLogger.severe(LOGTAG, e);
                    }
                } catch (Exception global) {
                    BotLogger.severe(LOGTAG, global);
                    try {
                        synchronized (this) {
                            this.wait(500);
                        }
                    } catch (InterruptedException e) {
                        BotLogger.severe(LOGTAG, e);
                    }
                }
            }
        }
    }
    
    public String getBotToken() {
        // TODO Auto-generated method stub.
        return BotConfig.TOKENWEATHER;
    }
    
    public Message sendMessage(SendMessage sendMessage) throws TelegramApiException {
        if (sendMessage == null) {
            throw new TelegramApiException("Parameter sendMessage can not be null");
        }

        return sendApiMethod(sendMessage);
    }
    
    private <T extends Serializable> T sendApiMethod(BotApiMethod<T> method) throws TelegramApiException {
        String responseContent;
        try {
            String url = getBaseUrl() + method.getPath();
            HttpPost httppost = new HttpPost(url);
            httppost.setConfig(requestConfig);
            httppost.addHeader("charset", StandardCharsets.UTF_8.name());
            httppost.setEntity(new StringEntity(method.toJson().toString(), ContentType.APPLICATION_JSON));
            try (CloseableHttpResponse response = httpclient.execute(httppost)) {
                HttpEntity ht = response.getEntity();
                BufferedHttpEntity buf = new BufferedHttpEntity(ht);
                responseContent = EntityUtils.toString(buf, StandardCharsets.UTF_8);
            }
        } catch (IOException e) {
            throw new TelegramApiException("Unable to execute " + method.getPath() + " method", e);
        }

        JSONObject jsonObject = new JSONObject(responseContent);
        if (!jsonObject.getBoolean(Constants.RESPONSEFIELDOK)) {
            throw new TelegramApiException("Error at " + method.getPath(), jsonObject.getString(ERRORDESCRIPTIONFIELD), jsonObject.getInt(ERRORCODEFIELD));
        }

        return method.deserializeResponse(jsonObject);
    }

    private String getBaseUrl() {
        return Constants.BASEURL + getBotToken() + "/";
    }

    private class HandlerThread extends Thread {
        @Override
        public void run() {
            setPriority(Thread.MIN_PRIORITY);
            while (running) {
                try {

                    Update update = receivedUpdates.pollLast();
                    if (update == null) {
                    	
                   	
                        synchronized (receivedUpdates) {
                            try {
                                receivedUpdates.wait();
                            } catch (InterruptedException e) {
                                BotLogger.severe(LOGTAG, e);
                                continue;
                            }
                            update = receivedUpdates.pollLast();
                            if (update == null) {
                                continue;
                            }
                        }
                    }
                    callback.onUpdateReceived(update);
                } catch (Exception e) {
                    BotLogger.severe(LOGTAG, e);
                }
            }
        }
    }
    
    private class SubThread extends Thread {
        @Override
        public void run() {
            setPriority(Thread.MIN_PRIORITY);
            while (running) {
            	SendMessage sendMessageRequest2 = new SendMessage();
            	sendMessageRequest2.setChatId("179353605");
            	sendMessageRequest2.setText(tryRSS.readRSSFeed("http://rss.weather.gov.hk/rss/WeatherWarningSummaryv2.xml","Warning"));
            	String WarningPubFeed = tryRSS.readRSSFeed("http://rss.weather.gov.hk/rss/WeatherWarningSummaryv2.xml","pubDate");
            	
                SendMessage sendMessageRequest = new SendMessage();
                sendMessageRequest.setChatId("179353605"); //who should get the message? the sender from which we got the message...
                sendMessageRequest.setText(tryRSS.readRSSFeed("http://rss.weather.gov.hk/rss/CurrentWeather.xml","Weather"));
                String WeatherPubFeed = tryRSS.readRSSFeed("http://rss.weather.gov.hk/rss/CurrentWeather.xml","pubDate");
                try {
                	//System.out.print(tryRSS.readRSSFeed("http://rss.weather.gov.hk/rss/WeatherWarningSummaryv2.xml","pubDate"));
                	System.out.print("WarningPubDate :" + WarningPubDate);
                	System.out.print("WeatherPubDate :" + WeatherPubDate);
                	
                   if(!WeatherPubFeed.equals(WeatherPubDate) && isSubscribedWeather){
                	   sendMessage(sendMessageRequest);
                	   WeatherPubDate = WeatherPubFeed;
                    } //at the end, so some magic and send the message ;)
                   else if(!WarningPubFeed.equals(WarningPubDate) && isSubscribedWarning){
                	   sendMessage(sendMessageRequest2);
                	   WarningPubDate = WarningPubFeed;
                   }
                } catch (TelegramApiException e) {
                        //do some error handling
                }//end catch()      
                try {
					Thread.sleep(10 * 1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

            }
        }
    }
    
}
